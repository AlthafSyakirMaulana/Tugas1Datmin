{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":11407684,"sourceType":"datasetVersion","datasetId":7145884}],"dockerImageVersionId":31011,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder, PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-14T23:25:51.131329Z","iopub.execute_input":"2025-04-14T23:25:51.131878Z","iopub.status.idle":"2025-04-14T23:25:51.135671Z","shell.execute_reply.started":"2025-04-14T23:25:51.131855Z","shell.execute_reply":"2025-04-14T23:25:51.134947Z"}},"outputs":[],"execution_count":84},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/datmin/train.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-14T23:25:51.311808Z","iopub.execute_input":"2025-04-14T23:25:51.312259Z","iopub.status.idle":"2025-04-14T23:25:54.746262Z","shell.execute_reply.started":"2025-04-14T23:25:51.312241Z","shell.execute_reply":"2025-04-14T23:25:54.745477Z"}},"outputs":[],"execution_count":85},{"cell_type":"markdown","source":"## CEK DATA","metadata":{}},{"cell_type":"code","source":"print(\"Jumlah baris:\", df.shape[0])\nprint(\"Jumlah kolom:\", df.shape[1])\nprint(\"Shape:\", df.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-14T23:25:54.747496Z","iopub.execute_input":"2025-04-14T23:25:54.748248Z","iopub.status.idle":"2025-04-14T23:25:54.752355Z","shell.execute_reply.started":"2025-04-14T23:25:54.748223Z","shell.execute_reply":"2025-04-14T23:25:54.751816Z"}},"outputs":[{"name":"stdout","text":"Jumlah baris: 29165\nJumlah kolom: 17\nShape: (29165, 17)\n","output_type":"stream"}],"execution_count":86},{"cell_type":"code","source":"print(df.dtypes)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-14T23:25:54.753195Z","iopub.execute_input":"2025-04-14T23:25:54.753612Z","iopub.status.idle":"2025-04-14T23:25:54.764344Z","shell.execute_reply.started":"2025-04-14T23:25:54.753595Z","shell.execute_reply":"2025-04-14T23:25:54.763768Z"}},"outputs":[{"name":"stdout","text":"url                             object\naddress                         object\nname                            object\nonline_order                    object\nbook_table                      object\nvotes                            int64\nphone                           object\nlocation                        object\nrest_type                       object\ndish_liked                      object\ncuisines                        object\napprox_cost(for two people)     object\nreviews_list                    object\nmenu_item                       object\nlisted_in(type)                 object\nlisted_in(city)                 object\nrate                           float64\ndtype: object\n","output_type":"stream"}],"execution_count":87},{"cell_type":"markdown","source":"## UBAH TIPE DATA","metadata":{}},{"cell_type":"code","source":"# Bersihkan koma dan ubah ke float\ndf['approx_cost(for two people)'] = df['approx_cost(for two people)'].str.replace(',', '')\ndf['approx_cost(for two people)'] = df['approx_cost(for two people)'].astype(float)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-14T23:25:54.765734Z","iopub.execute_input":"2025-04-14T23:25:54.765919Z","iopub.status.idle":"2025-04-14T23:25:54.784548Z","shell.execute_reply.started":"2025-04-14T23:25:54.765905Z","shell.execute_reply":"2025-04-14T23:25:54.783953Z"}},"outputs":[],"execution_count":88},{"cell_type":"code","source":"# Encode\ncategorical_cols = X_train.select_dtypes(include='object').columns\n\nfor col in categorical_cols:\n    le = LabelEncoder()\n    all_values = pd.concat([X_train[col], X_val[col]]).astype(str)\n    le.fit(all_values)\n    X_train[col] = le.transform(X_train[col].astype(str))\n    X_val[col] = le.transform(X_val[col].astype(str))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-14T23:25:54.785434Z","iopub.execute_input":"2025-04-14T23:25:54.785946Z","iopub.status.idle":"2025-04-14T23:25:54.830842Z","shell.execute_reply.started":"2025-04-14T23:25:54.785929Z","shell.execute_reply":"2025-04-14T23:25:54.830325Z"}},"outputs":[],"execution_count":89},{"cell_type":"markdown","source":"## CEK MISSING VALUE","metadata":{}},{"cell_type":"code","source":"print(\"Jumlah NaN per kolom:\")\nprint(df.isnull().sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-14T23:25:54.831512Z","iopub.execute_input":"2025-04-14T23:25:54.832004Z","iopub.status.idle":"2025-04-14T23:25:54.857137Z","shell.execute_reply.started":"2025-04-14T23:25:54.831983Z","shell.execute_reply":"2025-04-14T23:25:54.856570Z"}},"outputs":[{"name":"stdout","text":"Jumlah NaN per kolom:\nurl                                0\naddress                            0\nname                               0\nonline_order                       0\nbook_table                         0\nvotes                              0\nphone                            560\nlocation                           0\nrest_type                        101\ndish_liked                     12715\ncuisines                           9\napprox_cost(for two people)      170\nreviews_list                       0\nmenu_item                          0\nlisted_in(type)                    0\nlisted_in(city)                    0\nrate                               0\ndtype: int64\n","output_type":"stream"}],"execution_count":90},{"cell_type":"code","source":"df.nunique()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-14T23:25:54.857888Z","iopub.execute_input":"2025-04-14T23:25:54.858146Z","iopub.status.idle":"2025-04-14T23:25:55.894401Z","shell.execute_reply.started":"2025-04-14T23:25:54.858122Z","shell.execute_reply":"2025-04-14T23:25:55.893807Z"}},"outputs":[{"execution_count":91,"output_type":"execute_result","data":{"text/plain":"url                            29165\naddress                         8214\nname                            6291\nonline_order                       2\nbook_table                         2\nvotes                           2114\nphone                          10765\nlocation                          90\nrest_type                         87\ndish_liked                      4822\ncuisines                        2299\napprox_cost(for two people)       61\nreviews_list                   16788\nmenu_item                       6191\nlisted_in(type)                    7\nlisted_in(city)                   30\nrate                              31\ndtype: int64"},"metadata":{}}],"execution_count":91},{"cell_type":"markdown","source":"## DROP COlOUMN YANG TIDAK TERPAKAI dan RENAME COLUMN","metadata":{}},{"cell_type":"code","source":"df.rename(columns={'approx_cost(for two people)': 'approx_cost'}, inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-14T23:25:55.895108Z","iopub.execute_input":"2025-04-14T23:25:55.895359Z","iopub.status.idle":"2025-04-14T23:25:55.899232Z","shell.execute_reply.started":"2025-04-14T23:25:55.895333Z","shell.execute_reply":"2025-04-14T23:25:55.898502Z"}},"outputs":[],"execution_count":92},{"cell_type":"code","source":"print(df.nunique())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-14T23:25:55.900383Z","iopub.execute_input":"2025-04-14T23:25:55.900617Z","iopub.status.idle":"2025-04-14T23:25:56.669557Z","shell.execute_reply.started":"2025-04-14T23:25:55.900597Z","shell.execute_reply":"2025-04-14T23:25:56.668740Z"}},"outputs":[{"name":"stdout","text":"url                29165\naddress             8214\nname                6291\nonline_order           2\nbook_table             2\nvotes               2114\nphone              10765\nlocation              90\nrest_type             87\ndish_liked          4822\ncuisines            2299\napprox_cost           61\nreviews_list       16788\nmenu_item           6191\nlisted_in(type)        7\nlisted_in(city)       30\nrate                  31\ndtype: int64\n","output_type":"stream"}],"execution_count":93},{"cell_type":"code","source":"df = df.drop(['url', 'address', 'name', 'phone', 'dish_liked', 'reviews_list', 'menu_item'], axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-14T23:25:56.671151Z","iopub.execute_input":"2025-04-14T23:25:56.671351Z","iopub.status.idle":"2025-04-14T23:25:56.686494Z","shell.execute_reply.started":"2025-04-14T23:25:56.671335Z","shell.execute_reply":"2025-04-14T23:25:56.685794Z"}},"outputs":[],"execution_count":94},{"cell_type":"markdown","source":"## PRE IMPUTASI","metadata":{}},{"cell_type":"code","source":"df.columns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-14T23:25:56.687411Z","iopub.execute_input":"2025-04-14T23:25:56.687911Z","iopub.status.idle":"2025-04-14T23:25:56.692124Z","shell.execute_reply.started":"2025-04-14T23:25:56.687888Z","shell.execute_reply":"2025-04-14T23:25:56.691492Z"}},"outputs":[{"execution_count":95,"output_type":"execute_result","data":{"text/plain":"Index(['online_order', 'book_table', 'votes', 'location', 'rest_type',\n       'cuisines', 'approx_cost', 'listed_in(type)', 'listed_in(city)',\n       'rate'],\n      dtype='object')"},"metadata":{}}],"execution_count":95},{"cell_type":"markdown","source":"### kolom approx","metadata":{}},{"cell_type":"code","source":"print(df['approx_cost'].describe())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-14T23:25:56.692832Z","iopub.execute_input":"2025-04-14T23:25:56.693022Z","iopub.status.idle":"2025-04-14T23:25:56.706435Z","shell.execute_reply.started":"2025-04-14T23:25:56.693001Z","shell.execute_reply":"2025-04-14T23:25:56.705767Z"}},"outputs":[{"name":"stdout","text":"count    28995.000000\nmean       605.988481\nstd        465.814899\nmin         40.000000\n25%        300.000000\n50%        500.000000\n75%        750.000000\nmax       6000.000000\nName: approx_cost, dtype: float64\n","output_type":"stream"}],"execution_count":96},{"cell_type":"code","source":"plt.hist(df['approx_cost'].dropna(), bins=50)\nplt.title(\"Distribusi approx_cost\")\nplt.xlabel(\"Harga (untuk dua orang)\")\nplt.ylabel(\"Frekuensi\")\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-14T23:25:56.707212Z","iopub.execute_input":"2025-04-14T23:25:56.707487Z","iopub.status.idle":"2025-04-14T23:25:56.919995Z","shell.execute_reply.started":"2025-04-14T23:25:56.707462Z","shell.execute_reply":"2025-04-14T23:25:56.919345Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":97},{"cell_type":"code","source":"print(\"Skewness:\", df['approx_cost'].skew())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-14T23:25:57.097820Z","iopub.execute_input":"2025-04-14T23:25:57.098028Z","iopub.status.idle":"2025-04-14T23:25:57.102797Z","shell.execute_reply.started":"2025-04-14T23:25:57.098012Z","shell.execute_reply":"2025-04-14T23:25:57.102251Z"}},"outputs":[{"name":"stdout","text":"Skewness: 2.416387485170401\n","output_type":"stream"}],"execution_count":98},{"cell_type":"markdown","source":"## IMPUTASI","metadata":{}},{"cell_type":"markdown","source":"### approx","metadata":{}},{"cell_type":"code","source":"df['approx_cost'] = df['approx_cost'].fillna(df['approx_cost'].median())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-14T23:25:57.523396Z","iopub.execute_input":"2025-04-14T23:25:57.523774Z","iopub.status.idle":"2025-04-14T23:25:57.528123Z","shell.execute_reply.started":"2025-04-14T23:25:57.523758Z","shell.execute_reply":"2025-04-14T23:25:57.527526Z"}},"outputs":[],"execution_count":99},{"cell_type":"markdown","source":"### cuisines","metadata":{}},{"cell_type":"code","source":"# Gabung semua cuisines\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# Ganti NaN dulu\ndf['cuisines'] = df['cuisines'].fillna(\"Unknown\")\n\n# Buat fitur binary top cuisines\nvectorizer = CountVectorizer(tokenizer=lambda x: x.split(','), max_features=10)\ncuisine_features = vectorizer.fit_transform(df['cuisines'])\n\n# Masukin ke dataframe\ncuisine_df = pd.DataFrame(cuisine_features.toarray(), columns=vectorizer.get_feature_names_out())\n\n# Gabungin ke df\ndf = pd.concat([df.reset_index(drop=True), cuisine_df.reset_index(drop=True)], axis=1)\n\n# Drop kolom aslinya\ndf.drop('cuisines', axis=1, inplace=True)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-14T23:26:01.044895Z","iopub.execute_input":"2025-04-14T23:26:01.045402Z","iopub.status.idle":"2025-04-14T23:26:01.136524Z","shell.execute_reply.started":"2025-04-14T23:26:01.045377Z","shell.execute_reply":"2025-04-14T23:26:01.135922Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/feature_extraction/text.py:528: UserWarning: The parameter 'token_pattern' will not be used since 'tokenizer' is not None'\n  warnings.warn(\n","output_type":"stream"}],"execution_count":100},{"cell_type":"markdown","source":"### rest type","metadata":{}},{"cell_type":"code","source":"df['rest_type'] = df['rest_type'].fillna(\"Unknown\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-14T23:26:03.435361Z","iopub.execute_input":"2025-04-14T23:26:03.436101Z","iopub.status.idle":"2025-04-14T23:26:03.442299Z","shell.execute_reply.started":"2025-04-14T23:26:03.436069Z","shell.execute_reply":"2025-04-14T23:26:03.441719Z"}},"outputs":[],"execution_count":101},{"cell_type":"markdown","source":"## RMSE","metadata":{}},{"cell_type":"code","source":"# === ENCODE SEMUA KOLOM KATEGORIKAL + SIMPAN ENCODER ===\nencoders = {}\ncategorical_cols = df.select_dtypes(include='object').columns\n\nfor col in categorical_cols:\n    le = LabelEncoder()\n    df[col] = le.fit_transform(df[col].astype(str))\n    encoders[col] = le  # SIMPAN encoder-nya untuk test_df nanti\n\n# === SPLIT DATA ===\nX = df.drop(columns=['rate'])  # semua fitur\ny = df['rate']                 # target rating\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# === TRANSFORM POLYNOMIAL FEATURES ===\npoly = PolynomialFeatures(degree=2, include_bias=False)\nX_poly_train = poly.fit_transform(X_train)\nX_poly_val = poly.transform(X_val)\n\n# === TRAINING MODEL ===\nmodel = LinearRegression()\nmodel.fit(X_poly_train, y_train)\n\n# === PREDIKSI & RMSE ===\ny_pred = model.predict(X_poly_val)\nrmse = np.sqrt(mean_squared_error(y_val, y_pred))\nprint(f\"✅ RMSE pada validation set: {rmse:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-14T23:38:28.261881Z","iopub.execute_input":"2025-04-14T23:38:28.262249Z","iopub.status.idle":"2025-04-14T23:38:28.653750Z","shell.execute_reply.started":"2025-04-14T23:38:28.262226Z","shell.execute_reply":"2025-04-14T23:38:28.653015Z"}},"outputs":[{"name":"stdout","text":"✅ RMSE pada validation set: 0.3369\n","output_type":"stream"}],"execution_count":110},{"cell_type":"markdown","source":"# TEST DAN SAMPLE SUBMISSION","metadata":{}},{"cell_type":"code","source":"# === LOAD TEST DATA DAN SAMPLE SUBMISSION ===\ntest_df = pd.read_csv(\"/kaggle/input/datmin/test.csv\")\nsubmission = pd.read_csv(\"/kaggle/input/datmin/sample_submission.csv\")\n\n# === SAMAKAN PREPROCESSING ===\n\n# Rename kolom approx_cost\ntest_df.rename(columns={'approx_cost(for two people)': 'approx_cost'}, inplace=True)\n\n# Bersihkan koma dan ubah ke float\ntest_df['approx_cost'] = test_df['approx_cost'].astype(str).str.replace(',', '').astype(float)\ntest_df['approx_cost'] = test_df['approx_cost'].fillna(df['approx_cost'].median())\n\n# Imputasi sisa kolom\ntest_df['rest_type'] = test_df['rest_type'].fillna(\"Unknown\")\ntest_df['cuisines'] = test_df['cuisines'].fillna(\"Unknown\")\n\n# Vectorizer: fitur cuisines binary\ncuisine_features_test = vectorizer.transform(test_df['cuisines'])\ncuisine_df_test = pd.DataFrame(cuisine_features_test.toarray(), columns=vectorizer.get_feature_names_out())\ntest_df = pd.concat([test_df.reset_index(drop=True), cuisine_df_test.reset_index(drop=True)], axis=1)\ntest_df.drop('cuisines', axis=1, inplace=True)\n\n# Drop kolom tidak relevan\ndrop_cols = ['url', 'address', 'name', 'phone', 'dish_liked', 'reviews_list', 'menu_item']\ntest_df.drop(columns=drop_cols, inplace=True, errors='ignore')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-14T23:38:30.282666Z","iopub.execute_input":"2025-04-14T23:38:30.283145Z","iopub.status.idle":"2025-04-14T23:38:31.849258Z","shell.execute_reply.started":"2025-04-14T23:38:30.283123Z","shell.execute_reply":"2025-04-14T23:38:31.848409Z"}},"outputs":[],"execution_count":111},{"cell_type":"code","source":"common_cats = list(set(df.columns).intersection(set(test_df.columns)))\ncommon_cats = [col for col in common_cats if df[col].dtype == 'int64' or df[col].dtype == 'object']\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-14T23:38:33.751219Z","iopub.execute_input":"2025-04-14T23:38:33.751913Z","iopub.status.idle":"2025-04-14T23:38:33.755640Z","shell.execute_reply.started":"2025-04-14T23:38:33.751891Z","shell.execute_reply":"2025-04-14T23:38:33.755087Z"}},"outputs":[],"execution_count":113},{"cell_type":"code","source":"# Pastikan semua kolom object di test_df sudah di-encode\nfor col in test_df.select_dtypes(include='object').columns:\n    if col in encoders:\n        le = encoders[col]\n        test_df[col] = test_df[col].apply(lambda x: x if x in le.classes_ else \"Unknown\")\n        if \"Unknown\" not in le.classes_:\n            le.classes_ = np.append(le.classes_, \"Unknown\")\n        test_df[col] = le.transform(test_df[col].astype(str))\n    else:\n        print(f\"⚠️ Kolom '{col}' tidak ditemukan di train, dilewati.\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-14T23:39:43.244862Z","iopub.execute_input":"2025-04-14T23:39:43.245153Z","iopub.status.idle":"2025-04-14T23:39:43.251454Z","shell.execute_reply.started":"2025-04-14T23:39:43.245132Z","shell.execute_reply":"2025-04-14T23:39:43.250902Z"}},"outputs":[{"name":"stdout","text":"⚠️ Kolom 'online_order' tidak ditemukan di train, dilewati.\n⚠️ Kolom 'book_table' tidak ditemukan di train, dilewati.\n⚠️ Kolom 'location' tidak ditemukan di train, dilewati.\n⚠️ Kolom 'rest_type' tidak ditemukan di train, dilewati.\n⚠️ Kolom 'listed_in(type)' tidak ditemukan di train, dilewati.\n⚠️ Kolom 'listed_in(city)' tidak ditemukan di train, dilewati.\n","output_type":"stream"}],"execution_count":116},{"cell_type":"code","source":"print(\"Kolom bertipe object di test_df:\", test_df.select_dtypes(include='object').columns.tolist())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-14T23:39:57.214400Z","iopub.execute_input":"2025-04-14T23:39:57.214668Z","iopub.status.idle":"2025-04-14T23:39:57.219839Z","shell.execute_reply.started":"2025-04-14T23:39:57.214650Z","shell.execute_reply":"2025-04-14T23:39:57.219318Z"}},"outputs":[{"name":"stdout","text":"Kolom bertipe object di test_df: ['online_order', 'book_table', 'location', 'rest_type', 'listed_in(type)', 'listed_in(city)']\n","output_type":"stream"}],"execution_count":117},{"cell_type":"code","source":"# Encode kolom object yang belum sempat di-handle karena gak ada di train\ncols_to_encode = ['online_order', 'book_table', 'location', 'rest_type', 'listed_in(type)', 'listed_in(city)']\n\nfor col in cols_to_encode:\n    if col in test_df.columns:\n        le = LabelEncoder()\n        test_df[col] = le.fit_transform(test_df[col].astype(str))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-14T23:40:35.790608Z","iopub.execute_input":"2025-04-14T23:40:35.791311Z","iopub.status.idle":"2025-04-14T23:40:35.810470Z","shell.execute_reply.started":"2025-04-14T23:40:35.791284Z","shell.execute_reply":"2025-04-14T23:40:35.809717Z"}},"outputs":[],"execution_count":118},{"cell_type":"code","source":"# === TRANSFORM POLYNOMIAL FITUR TEST ===\nX_test_final = poly.transform(test_df)\n\n# === PREDIKSI ===\npred_test = model.predict(X_test_final)\n\n# === MASUKKAN HASIL KE SAMPLE SUBMISSION ===\nsubmission['rate'] = pred_test\nsubmission['rate'] = submission['rate'].round(2)  # pembulatan ke 2 angka di belakang koma\n\n# === SIMPAN FILE UNTUK DIUPLOAD ===\nsubmission.to_csv(\"submission1.csv\", index=False)\nprint(\"✅ File 'submission.csv' berhasil disimpan dan siap diupload!\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-14T23:42:53.995418Z","iopub.execute_input":"2025-04-14T23:42:53.996154Z","iopub.status.idle":"2025-04-14T23:42:54.046437Z","shell.execute_reply.started":"2025-04-14T23:42:53.996131Z","shell.execute_reply":"2025-04-14T23:42:54.045754Z"}},"outputs":[{"name":"stdout","text":"✅ File 'submission.csv' berhasil disimpan dan siap diupload!\n","output_type":"stream"}],"execution_count":120},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}